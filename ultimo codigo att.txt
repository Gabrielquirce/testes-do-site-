<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Direção Escolar - Escola XYZ</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <img src="logo-escola.png" alt="Logo Escola XYZ" class="logo">
        <nav>
            <ul>
                <li><a href="index.html">Início</a></li>
                <li class="dropdown">
                    Serviços
                    <div class="dropdown-content">
                        <a href="index2.html">Matrículas</a>
                        <a href="#">Boletins</a>
                        <a href="#">Requerimentos</a>
                    </div>
                </li>
                <li><a href="#calendario">Calendário</a></li>
                <li><a href="#">Contato</a></li>
                <li><a href="#" class="btn">Portal do Aluno</a></li>
            </ul>
        </nav>
    </header>

    <section class="banner">
        <h1>Bem-vindo à Escola XYZ</h1>
        <p>Educação de qualidade há mais de 30 anos</p>
        <button>Faça sua Matrícula</button>
    </section>

    <section class="destaques">
        <div class="card">
            <h3>Últimas Notícias</h3>
            <p>Resultados do Vestibular 2024</p>
        </div>
        <div class="card">
            <h3>Próximos Eventos</h3>
            <p>Reunião de Pais: 25/10</p>
        </div>
        <div class="card">
            <h3>Links Úteis</h3>
            <p>Horário de Aulas</p>
        </div>
    </section>

    <!-- Seção do Calendário Editável -->
    <section class="calendar-section" id="calendario">
        <div class="calendar-controls">
            <h2 id="current-month"></h2>
            <div>
                <button class="calendar-btn" onclick="previousMonth()">‹</button>
                <button class="calendar-btn" onclick="nextMonth()">›</button>
            </div>
        </div>
        
        <div class="calendar-container">
            <div class="calendar" id="calendar"></div>
            <div class="event-list" id="event-list">
                <h3>Eventos do Mês</h3>
                <div id="events-container"></div>
            </div>
        </div>
    </section>

    <section class="sobre">
        <h2>Sobre Nossa Escola</h2>
        <p>Comprometidos com a excelência educacional desde 1990</p>
        <div class="stats">
            <div class="stat-item">95% de Aprovação</div>
            <div class="stat-item">30 Anos de História</div>
        </div>
    </section>

    <footer>
        <div>
            <h4>Links Rápidos</h4>
            <a href="#">Política de Privacidade</a>
            <a href="#">Trabalhe Conosco</a>
        </div>
        <div>
            <h4>Newsletter</h4>
            <input type="email" placeholder="Seu e-mail">
            <button>Assinar</button>
        </div>
        <div>
            <p>© 2024 Escola XYZ</p>
            <p>Desenvolvido por [Nome]</p>
        </div>
    </footer>

    <script src="scripts.js"></script>
</body>
</html>

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Direção Escolar - Escola XYZ</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <img src="logo-escola.png" alt="Logo Escola XYZ" class="logo">
        <nav>
            <ul>
                <li><a href="index.html">Início</a></li>
                <li class="dropdown">
                    Serviços
                    <div class="dropdown-content">
                        <a href="">Matrículas</a>
                        <a href="#">Boletins</a>
                        <a href="#">Requerimentos</a>
                    </div>
                </li>
                <li><a href="index.html">Calendário</a></li>
                <li><a href="#">Contato</a></li>
                <li><a href="#" class="btn">Portal do Aluno</a></li>
            </ul>
        </nav>
    </header>
    <!-- Seção de Matrícula Adicionada -->
    <section class="matricula" id="matricula">
        <h2>Formulário de Matrícula</h2>
        <form id="form-matricula" onsubmit="return handleSubmit(event)">
            <div class="form-group">
                <label for="nome">Nome completo do aluno:</label>
                <input type="text" id="nome" required>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="nascimento">Data de nascimento:</label>
                    <input type="date" id="nascimento" required>
                </div>
                <div class="form-group">
                    <label for="responsavel">Responsável legal:</label>
                    <input type="text" id="responsavel" required>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="serie">Série pretendida:</label>
                    <select id="serie" required>
                        <option value="">Selecione</option>
                        <option>1º Ano Fundamental</option>
                        <option>2º Ano Fundamental</option>
                        <!-- ... outras opções ... -->
                    </select>
                </div>
                <div class="form-group">
                    <label>Turno preferencial:</label>
                    <div class="radio-group">
                        <label><input type="radio" name="turno" value="manha" required> Manhã</label>
                        <label><input type="radio" name="turno" value="tarde"> Tarde</label>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label>Documentos anexados:</label>
                <div class="documentos">
                    <div class="doc-item">
                        <input type="file" id="certidao" accept=".pdf,.jpg,.png">
                        <label for="certidao">Certidão de Nascimento</label>
                    </div>
                    <!-- Outros documentos -->
                </div>
            </div>

            <div class="form-actions">
                <button type="submit">Enviar Matrícula</button>
                <button type="button" onclick="resetForm()">Limpar</button>
            </div>
        </form>
    </section>
    <section class="lista-alunos" id="lista-alunos">
    <h2>Alunos Matriculados</h2>
    
    <div class="filtros">
        <input type="text" id="busca" placeholder="Pesquisar por nome..." onkeyup="filtrarAlunos()">
        <select id="filtro-status" onchange="filtrarAlunos()">
            <option value="">Todos Status</option>
            <option value="Pendente">Pendente</option>
            <option value="Aprovado">Aprovado</option>
            <option value="Rejeitado">Rejeitado</option>
        </select>
    </div>
    <footer>
        <div>
            <h4>Links Rápidos</h4>
            <a href="#">Política de Privacidade</a>
            <a href="#">Trabalhe Conosco</a>
        </div>
        <div>
            <h4>Newsletter</h4>
            <input type="email" placeholder="Seu e-mail">
            <button>Assinar</button>
        </div>
        <div>
            <p>© 2024 Escola XYZ</p>
            <p>Desenvolvido por [Nome]</p>
        </div>
    </footer>
</section>

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Arial', sans-serif;
}

header {
    background: #fff;
    padding: 1rem;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.logo {
    width: 150px;
}

nav ul {
    display: flex;
    list-style: none;
    gap: 2rem;
}

nav a {
    text-decoration: none;
    color: #2c3e50;
    font-weight: 500;
}

.dropdown {
    position: relative;
}

.dropdown-content {
    display: none;
    position: absolute;
    background: #fff;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.dropdown:hover .dropdown-content {
    display: block;
}

.banner {
    background: linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)), url('https://via.placeholder.com/1920x600');
    background-size: cover;
    color: white;
    padding: 4rem 2rem;
    text-align: center;
}

.destaques {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
    padding: 3rem 2rem;
    background: #f9f9f9;
}

.card {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

/* Estilos do Calendário Editável */
.calendar-section {
    padding: 2rem;
    background: #fff;
}

.calendar-container {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 20px;
    max-width: 1200px;
    margin: 0 auto;
}

.calendar {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 5px;
}

.calendar-day {
    border: 1px solid #ccc;
    padding: 10px;
    min-height: 80px;
    cursor: pointer;
    background-color: #fff;
    position: relative;
}

.editable-date:hover::after {
    content: "✎";
    position: absolute;
    right: 5px;
    top: 5px;
    font-size: 0.8em;
    color: #2c3e50;
}

.current-month {
    background-color: #e8f4f8;
}

.event {
    background-color: #4CAF50;
    color: white;
    padding: 2px 5px;
    margin: 2px 0;
    border-radius: 3px;
    font-size: 0.9em;
}

.calendar-controls {
    margin: 1rem 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.calendar-btn {
    padding: 8px 16px;
    background-color: #2c3e50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.event-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 5px 0;
    padding: 5px;
    background-color: #f8f8f8;
}

.event-item button {
    margin-left: 5px;
    padding: 3px 8px;
}

/* Estilos Restantes */
.sobre {
    padding: 4rem 2rem;
    text-align: center;
    background: #e8f4f8;
}

.contato {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    padding: 3rem 2rem;
}

footer {
    background: #2c3e50;
    color: white;
    padding: 3rem 2rem;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
}

@media (max-width: 768px) {
    .destaques, .contato, footer, .calendar-container {
        grid-template-columns: 1fr;
    }

    nav ul {
        flex-direction: column;
        gap: 1rem;
    }

    header {
        flex-direction: column;
        gap: 1rem;
    }
}
.matricula {
    padding: 2rem;
    max-width: 800px;
    margin: 2rem auto;
}

.form-group {
    margin-bottom: 1rem;
}

.form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-bottom: 1rem;
}

label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
}

input, select {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.radio-group {
    display: flex;
    gap: 1rem;
    margin-top: 0.5rem;
}

.documentos {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
}

.doc-item input[type="file"] {
    display: none;
}

.doc-item label {
    display: block;
    padding: 1rem;
    border: 2px dashed #ddd;
    text-align: center;
    cursor: pointer;
}

.form-actions {
    margin-top: 2rem;
    text-align: center;
}

@media (max-width: 600px) {
    .form-row {
        grid-template-columns: 1fr;
    }
}

/* Estilos para a lista de alunos */
.lista-alunos {
    padding: 2rem;
    max-width: 1200px;
    margin: 2rem auto;
}

.filtros {
    display: flex;
    gap: 1rem;
    margin: 1rem 0;
}

.filtros input, .filtros select {
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.tabela-wrapper {
    overflow-x: auto;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin: 1rem 0;
}

th, td {
    padding: 0.75rem;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: #2c3e50;
    color: white;
}

.status {
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-weight: bold;
}

.status.pendente { background: #ffd700; color: #000; }
.status.aprovado { background: #90EE90; color: #000; }
.status.rejeitado { background: #ff9999; color: #000; }

button {
    padding: 0.25rem 0.5rem;
    margin: 0 0.25rem;
    cursor: pointer;
}

.controles {
    margin-top: 1rem;
    text-align: center;
}

@media (max-width: 768px) {
    .filtros {
        flex-direction: column;
    }
    
    table {
        font-size: 0.8rem;
    }
    
    button {
        padding: 0.2rem 0.4rem;
    }
}

/* Estilos corrigidos para a tabela */
.tabela-wrapper {
    overflow-x: auto;
    margin: 1rem 0;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    border-radius: 8px;
}

table {
    width: 100%;
    border-collapse: collapse;
    background: white;
}

th {
    background-color: #2c3e50;
    color: white;
    padding: 1rem;
    text-align: left;
}

td {
    padding: 0.75rem;
    border-bottom: 1px solid #eee;
}

tr:hover {
    background-color: #f8f9fa;
}

button {
    padding: 0.4rem 0.8rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: opacity 0.3s;
}

button:hover {
    opacity: 0.8;
}

.aprovar-btn {
    background-color: #4CAF50;
    color: white;
}

.rejeitar-btn {
    background-color: #f44336;
    color: white;
}


let currentDate = new Date();
let events = JSON.parse(localStorage.getItem('calendarEvents')) || {};

function generateCalendar(month, year) {
    const calendar = document.getElementById('calendar');
    calendar.innerHTML = '';
    
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    
    document.getElementById('current-month').textContent = 
        `${firstDay.toLocaleString('pt-BR', { month: 'long' })} ${year}`.toUpperCase();

    // Dias vazios
    for (let i = 0; i < firstDay.getDay(); i++) {
        calendar.appendChild(createEmptyDay());
    }

    // Dias do mês
    for (let day = 1; day <= lastDay.getDate(); day++) {
        const date = new Date(year, month, day);
        calendar.appendChild(createCalendarDay(date));
    }

    updateEventList();
}

function createEmptyDay() {
    const emptyDay = document.createElement('div');
    emptyDay.classList.add('calendar-day');
    return emptyDay;
}

function createCalendarDay(date) {
    const dayElement = document.createElement('div');
    dayElement.classList.add('calendar-day', 'current-month', 'editable-date');
    dayElement.innerHTML = `<strong>${date.getDate()}</strong>`;
    dayElement.dataset.date = date.toISOString().split('T')[0];

    // Eventos de edição
    dayElement.ondblclick = (e) => {
        e.stopPropagation();
        showDatePicker(date);
    };

    dayElement.onclick = () => manageEvent(date);

    // Adicionar eventos existentes
    const dateKey = date.toISOString().split('T')[0];
    if (events[dateKey]) {
        events[dateKey].forEach((event, index) => {
            dayElement.appendChild(createEventElement(event, index + 1));
        });
    }

    return dayElement;
}

function createEventElement(event, index) {
    const eventElement = document.createElement('div');
    eventElement.classList.add('event');
    eventElement.textContent = `${index}. ${event}`;
    return eventElement;
}

function showDatePicker(oldDate) {
    const newDateStr = prompt(`Editar data:\nData atual: ${oldDate.toLocaleDateString('pt-BR')}\n\nDigite a nova data (DD/MM/AAAA):`);
    
    if (!newDateStr) return;

    const [day, month, year] = newDateStr.split('/').map(Number);
    const newDate = new Date(year, month - 1, day);
    
    if (isValidDate(newDate)) {
        updateEventDates(oldDate, newDate);
        generateCalendar(currentDate.getMonth(), currentDate.getFullYear());
    } else {
        alert('Data inválida! Use o formato DD/MM/AAAA');
    }
}

function isValidDate(d) {
    return d instanceof Date && !isNaN(d);
}

function updateEventDates(oldDate, newDate) {
    const oldKey = oldDate.toISOString().split('T')[0];
    const newKey = newDate.toISOString().split('T')[0];
    
    if (events[oldKey]) {
        events[newKey] = [...(events[newKey] || []), ...events[oldKey]];
        delete events[oldKey];
        localStorage.setItem('calendarEvents', JSON.stringify(events));
    }
}

function manageEvent(date) {
    const dateKey = date.toISOString().split('T')[0];
    const existingEvents = events[dateKey] || [];
    
    const action = prompt(`Data: ${date.toLocaleDateString('pt-BR')}\nEventos: ${existingEvents.join(', ')}\n\nDigite:\n- Novo evento para adicionar\n- "remover [número]" para excluir`);

    if (!action) return;

    if (action.toLowerCase().startsWith('remover')) {
        const index = parseInt(action.split(' ')[1]) - 1;
        if (!isNaN(index) && index >= 0 && index < existingEvents.length) {
            existingEvents.splice(index, 1);
        }
    } else if (action.trim()) {
        existingEvents.push(action.trim());
    }

    updateEvents(dateKey, existingEvents);
    generateCalendar(currentDate.getMonth(), currentDate.getFullYear());
}

function updateEvents(dateKey, eventsArray) {
    if (eventsArray.length > 0) {
        events[dateKey] = eventsArray;
    } else {
        delete events[dateKey];
    }
    localStorage.setItem('calendarEvents', JSON.stringify(events));
}

function updateEventList() {
    const container = document.getElementById('events-container');
    container.innerHTML = '';
    
    Object.keys(events).forEach(date => {
        const dateObj = new Date(date);
        if (dateObj.getMonth() === currentDate.getMonth()) {
            events[date].forEach((event, index) => {
                const eventItem = document.createElement('div');
                eventItem.classList.add('event-item');
                eventItem.innerHTML = `
                    <span>${dateObj.toLocaleDateString('pt-BR')}: ${event}</span>
                    <div>
                        <button onclick="editEvent('${date}', ${index})">Editar</button>
                        <button onclick="removeEvent('${date}', ${index})">×</button>
                    </div>
                `;
                container.appendChild(eventItem);
            });
        }
    });
}

function editEvent(dateKey, index) {
    const newText = prompt('Editar evento:', events[dateKey][index]);
    if (newText !== null) {
        events[dateKey][index] = newText.trim();
        localStorage.setItem('calendarEvents', JSON.stringify(events));
        generateCalendar(currentDate.getMonth(), currentDate.getFullYear());
    }
}

function removeEvent(dateKey, index) {
    if (events[dateKey]) {
        events[dateKey].splice(index, 1);
        if (events[dateKey].length === 0) {
            delete events[dateKey];
        }
        localStorage.setItem('calendarEvents', JSON.stringify(events));
        generateCalendar(currentDate.getMonth(), currentDate.getFullYear());
    }
}

function previousMonth() {
    currentDate.setMonth(currentDate.getMonth() - 1);
    generateCalendar(currentDate.getMonth(), currentDate.getFullYear());
}

function nextMonth() {
    currentDate.setMonth(currentDate.getMonth() + 1);
    generateCalendar(currentDate.getMonth(), currentDate.getFullYear());
}

// Inicialização
generateCalendar(currentDate.getMonth(), currentDate.getFullYear());
const matriculas = JSON.parse(localStorage.getItem('matriculas')) || [];

function handleSubmit(e) {
    e.preventDefault();
    
    const matricula = {
        nome: document.getElementById('nome').value,
        nascimento: document.getElementById('nascimento').value,
        responsavel: document.getElementById('responsavel').value,
        serie: document.getElementById('serie').value,
        turno: document.querySelector('input[name="turno"]:checked').value,
        data: new Date().toISOString(),
        status: 'Pendente'
    };

    if(validateMatricula(matricula)) {
        matriculas.push(matricula);
        localStorage.setItem('matriculas', JSON.stringify(matriculas));
        showConfirmation();
        return false;
    }
    return false;
}

function validateMatricula(data) {
    // Validação complexa aqui
    const idade = calcularIdade(data.nascimento);
    return idade >= 6;
}

function calcularIdade(dataNasc) {
    const diff = Date.now() - new Date(dataNasc).getTime();
    return Math.abs(new Date(diff).getUTCFullYear() - 1970);
}

function showConfirmation() {
    // Exibir modal de confirmação
    alert('Matrícula recebida com sucesso!');
    resetForm();
}

function resetForm() {
    document.getElementById('form-matricula').reset();
}
function handleSubmit(e) {
    e.preventDefault();
    
    const matricula = {
        id: Date.now(),
        nome: document.getElementById('nome').value,
        nascimento: document.getElementById('nascimento').value,
        responsavel: document.getElementById('responsavel').value,
        serie: document.getElementById('serie').value,
        turno: document.querySelector('input[name="turno"]:checked').value,
        data: new Date().toISOString(),
        status: 'Pendente',
        observacoes: ''
    };

    if(validateMatricula(matricula)) {
        matriculas.push(matricula);
        localStorage.setItem('matriculas', JSON.stringify(matriculas));
        showConfirmation();
        atualizarListaAlunos();
        return false;
    }
    return false;
}

// Função para carregar a lista de alunos
function atualizarListaAlunos() {
    const tbody = document.getElementById('corpo-tabela');
    tbody.innerHTML = '';
    
    matriculas.forEach(aluno => {
        const row = `
            <tr data-status="${aluno.status}">
                <td>${aluno.nome}</td>
                <td>${new Date(aluno.nascimento).toLocaleDateString('pt-BR')}</td>
                <td>${aluno.serie}</td>
                <td>${aluno.turno.charAt(0).toUpperCase() + aluno.turno.slice(1)}</td>
                <td><span class="status ${aluno.status.toLowerCase()}">${aluno.status}</span></td>
                <td>
                    <button onclick="editarAluno(${aluno.id})">Editar</button>
                    <button onclick="alterarStatus(${aluno.id}, 'Aprovado')">✓</button>
                    <button onclick="alterarStatus(${aluno.id}, 'Rejeitado')">✕</button>
                </td>
            </tr>
        `;
        tbody.innerHTML += row;
    });
}

// Função para filtrar alunos
function filtrarAlunos() {
    const termo = document.getElementById('busca').value.toLowerCase();
    const status = document.getElementById('filtro-status').value;
    
    const linhas = document.querySelectorAll('#corpo-tabela tr');
    
    linhas.forEach(linha => {
        const nome = linha.children[0].textContent.toLowerCase();
        const linhaStatus = linha.dataset.status;
        const matchTermo = nome.includes(termo);
        const matchStatus = status ? linhaStatus === status : true;
        
        linha.style.display = (matchTermo && matchStatus) ? '' : 'none';
    });
}

// Funções de manipulação de dados
function editarAluno(id) {
    const aluno = matriculas.find(a => a.id === id);
    if(aluno) {
        // Preencher formulário com dados do aluno
        document.getElementById('nome').value = aluno.nome;
        document.getElementById('nascimento').value = aluno.nascimento;
        document.getElementById('responsavel').value = aluno.responsavel;
        document.getElementById('serie').value = aluno.serie;
        document.querySelector(`input[name="turno"][value="${aluno.turno}"]`).checked = true;
        
        // Remover o registro antigo
        matriculas = matriculas.filter(a => a.id !== id);
        localStorage.setItem('matriculas', JSON.stringify(matriculas));
        atualizarListaAlunos();
    }
}

function alterarStatus(id, novoStatus) {
    const aluno = matriculas.find(a => a.id === id);
    if(aluno) {
        aluno.status = novoStatus;
        localStorage.setItem('matriculas', JSON.stringify(matriculas));
        atualizarListaAlunos();
    }
}

// Funções de exportação
function exportarParaExcel() {
    // Implementação da exportação para Excel
    alert('Exportação para Excel implementada aqui');
}

function imprimirLista() {
    window.print();
}

// Atualizar lista ao carregar a página
document.addEventListener('DOMContentLoaded', atualizarListaAlunos);
// Ao carregar a página
document.addEventListener('DOMContentLoaded', () => {
    // Carregar dados do localStorage
    matriculas = JSON.parse(localStorage.getItem('matriculas')) || [];
    atualizarListaAlunos();
});

// Função para atualizar a lista de alunos
function atualizarListaAlunos() {
    const tbody = document.getElementById('corpo-tabela');
    tbody.innerHTML = '';
    
    matriculas.forEach(aluno => {
        const row = document.createElement('tr');
        row.dataset.status = aluno.status;
        
        row.innerHTML = `
            <td>${aluno.nome}</td>
            <td>${new Date(aluno.nascimento).toLocaleDateString('pt-BR')}</td>
            <td>${aluno.serie}</td>
            <td>${aluno.turno.charAt(0).toUpperCase() + aluno.turno.slice(1)}</td>
            <td><span class="status ${aluno.status.toLowerCase()}">${aluno.status}</span></td>
            <td>
                <button onclick="editarAluno(${aluno.id})">Editar</button>
                <button class="aprovar-btn" onclick="alterarStatus(${aluno.id}, 'Aprovado')">✓</button>
                <button class="rejeitar-btn" onclick="alterarStatus(${aluno.id}, 'Rejeitado')">✕</button>
            </td>
        `;
        
        tbody.appendChild(row);
    });
}

// Função para alterar status corrigida
function alterarStatus(id, novoStatus) {
    matriculas = matriculas.map(aluno => {
        if(aluno.id === id) {
            return {...aluno, status: novoStatus};
        }
        return aluno;
    });
    
    localStorage.setItem('matriculas', JSON.stringify(matriculas));
    atualizarListaAlunos();
}

// Função de edição corrigida
function editarAluno(id) {
    const aluno = matriculas.find(a => a.id === id);
    if(aluno) {
        // Preencher formulário
        document.getElementById('nome').value = aluno.nome;
        document.getElementById('nascimento').value = aluno.nascimento;
        document.getElementById('responsavel').value = aluno.responsavel;
        document.getElementById('serie').value = aluno.serie;
        document.querySelector(`input[name="turno"][value="${aluno.turno}"]`).checked = true;
        
        // Remover o aluno da lista
        matriculas = matriculas.filter(a => a.id !== id);
        localStorage.setItem('matriculas', JSON.stringify(matriculas));
    }
}

// Função de filtro corrigida
function filtrarAlunos() {
    const termo = document.getElementById('busca').value.toLowerCase();
    const status = document.getElementById('filtro-status').value;
    
    const linhas = document.querySelectorAll('#corpo-tabela tr');
    
    linhas.forEach(linha => {
        const nome = linha.children[0].textContent.toLowerCase();
        const linhaStatus = linha.dataset.status;
        
        const matchTermo = nome.includes(termo);
        const matchStatus = status ? linhaStatus === status : true;
        
        linha.style.display = (matchTermo && matchStatus) ? '' : 'none';
    });
}
